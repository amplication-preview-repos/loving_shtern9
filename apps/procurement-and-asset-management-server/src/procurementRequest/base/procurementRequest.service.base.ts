/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ProcurementRequest as PrismaProcurementRequest,
  Supplier as PrismaSupplier,
} from "@prisma/client";

export class ProcurementRequestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ProcurementRequestCountArgs, "select">
  ): Promise<number> {
    return this.prisma.procurementRequest.count(args);
  }

  async procurementRequests<T extends Prisma.ProcurementRequestFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProcurementRequestFindManyArgs>
  ): Promise<PrismaProcurementRequest[]> {
    return this.prisma.procurementRequest.findMany<Prisma.ProcurementRequestFindManyArgs>(
      args
    );
  }
  async procurementRequest<T extends Prisma.ProcurementRequestFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProcurementRequestFindUniqueArgs>
  ): Promise<PrismaProcurementRequest | null> {
    return this.prisma.procurementRequest.findUnique(args);
  }
  async createProcurementRequest<T extends Prisma.ProcurementRequestCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProcurementRequestCreateArgs>
  ): Promise<PrismaProcurementRequest> {
    return this.prisma.procurementRequest.create<T>(args);
  }
  async updateProcurementRequest<T extends Prisma.ProcurementRequestUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProcurementRequestUpdateArgs>
  ): Promise<PrismaProcurementRequest> {
    return this.prisma.procurementRequest.update<T>(args);
  }
  async deleteProcurementRequest<T extends Prisma.ProcurementRequestDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProcurementRequestDeleteArgs>
  ): Promise<PrismaProcurementRequest> {
    return this.prisma.procurementRequest.delete(args);
  }

  async getSupplier(parentId: string): Promise<PrismaSupplier | null> {
    return this.prisma.procurementRequest
      .findUnique({
        where: { id: parentId },
      })
      .supplier();
  }
}
