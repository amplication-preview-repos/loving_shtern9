/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ProcurementRequest } from "./ProcurementRequest";
import { ProcurementRequestCountArgs } from "./ProcurementRequestCountArgs";
import { ProcurementRequestFindManyArgs } from "./ProcurementRequestFindManyArgs";
import { ProcurementRequestFindUniqueArgs } from "./ProcurementRequestFindUniqueArgs";
import { CreateProcurementRequestArgs } from "./CreateProcurementRequestArgs";
import { UpdateProcurementRequestArgs } from "./UpdateProcurementRequestArgs";
import { DeleteProcurementRequestArgs } from "./DeleteProcurementRequestArgs";
import { Supplier } from "../../supplier/base/Supplier";
import { ProcurementRequestService } from "../procurementRequest.service";
@graphql.Resolver(() => ProcurementRequest)
export class ProcurementRequestResolverBase {
  constructor(protected readonly service: ProcurementRequestService) {}

  async _procurementRequestsMeta(
    @graphql.Args() args: ProcurementRequestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ProcurementRequest])
  async procurementRequests(
    @graphql.Args() args: ProcurementRequestFindManyArgs
  ): Promise<ProcurementRequest[]> {
    return this.service.procurementRequests(args);
  }

  @graphql.Query(() => ProcurementRequest, { nullable: true })
  async procurementRequest(
    @graphql.Args() args: ProcurementRequestFindUniqueArgs
  ): Promise<ProcurementRequest | null> {
    const result = await this.service.procurementRequest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ProcurementRequest)
  async createProcurementRequest(
    @graphql.Args() args: CreateProcurementRequestArgs
  ): Promise<ProcurementRequest> {
    return await this.service.createProcurementRequest({
      ...args,
      data: {
        ...args.data,

        supplier: args.data.supplier
          ? {
              connect: args.data.supplier,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ProcurementRequest)
  async updateProcurementRequest(
    @graphql.Args() args: UpdateProcurementRequestArgs
  ): Promise<ProcurementRequest | null> {
    try {
      return await this.service.updateProcurementRequest({
        ...args,
        data: {
          ...args.data,

          supplier: args.data.supplier
            ? {
                connect: args.data.supplier,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProcurementRequest)
  async deleteProcurementRequest(
    @graphql.Args() args: DeleteProcurementRequestArgs
  ): Promise<ProcurementRequest | null> {
    try {
      return await this.service.deleteProcurementRequest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Supplier, {
    nullable: true,
    name: "supplier",
  })
  async getSupplier(
    @graphql.Parent() parent: ProcurementRequest
  ): Promise<Supplier | null> {
    const result = await this.service.getSupplier(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
